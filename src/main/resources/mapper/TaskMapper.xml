<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.task.dao.mapper.TaskMapper">
  <resultMap id="BaseResultMap" type="com.task.entity.Task">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="creator_id" jdbcType="VARCHAR" property="creatorId" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
    <result column="receive_time" jdbcType="TIMESTAMP" property="receiveTime" />
    <result column="creator_name" jdbcType="VARCHAR" property="creatorName" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from task
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.task.entity.Task" useGeneratedKeys="true" keyProperty="id">
    <selectKey keyProperty="id" resultType="string" order="BEFORE">
      select replace(UUID(), '-', '')
    </selectKey>
    insert into task (id, `name`, description, 
      `status`, creator_id, user_id, 
      create_time, update_time, content,receive_time
      )
    values (#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{creatorId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR} ,#{receiveTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.task.entity.Task">
    update task
    set `name` = #{name,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=INTEGER},
      creator_id = #{creatorId,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR},
      receive_time = #{receiveTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>

  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select t.id, t.`name`, t.description, t.`status`, u.username AS creator_name, us.username AS user_name, t.creator_id, t.user_id,t.create_time, t.update_time,
    t.content,t.receive_time
    from task t
    LEFT JOIN user u ON t.creator_id = u.id
    LEFT JOIN user us ON t.user_id = us.id
    where t.id = #{id,jdbcType=VARCHAR}
  </select>

  <select id="selectAll" resultMap="BaseResultMap">
    select t.id, t.`name`, t.description, t.`status`, u.username AS creator_name, us.username AS user_name,t.creator_id, t.user_id, t.create_time, t.update_time,
    t.content,t.receive_time
    from task t
    LEFT JOIN user u ON t.creator_id = u.id
    LEFT JOIN user us ON t.user_id = us.id
  </select>


  <!--查看7天内任务-->
  <select id="selectPending" resultMap="BaseResultMap">
     select t.id, t.`name`, t.description, t.`status`, u.username AS creator_name, us.username AS user_name,t.creator_id, t.user_id, t.create_time, t.update_time,
    t.content,t.receive_time
    from task t
    LEFT JOIN user u ON t.creator_id = u.id
    LEFT JOIN user us ON t.user_id = us.id
    where DATE_SUB(now(), INTERVAL 7 DAY) &lt;= date(t.create_time) AND
    t.status = 0
  </select>


  <!--查看用户20分钟内领取的任务-->
  <select id="selectMinuteByUserId" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT id, `name`, description, `status`, creator_id, user_id, create_time, update_time,
    content,receive_time
    FROM task
    WHERE receive_time >= now()-interval 20 MINUTE AND user_id = #{userId,jdbcType=VARCHAR}
  </select>

  <!--查看用户下任务-->
  <select id="selectByUserId" parameterType="java.lang.String" resultMap="BaseResultMap">
     select t.id, t.`name`, t.description, t.`status`, u.username AS creator_name, us.username AS user_name,t.creator_id, t.user_id, t.create_time, t.update_time,
    t.content,t.receive_time
    from task t
    LEFT JOIN user u ON t.creator_id = u.id
    LEFT JOIN user us ON t.user_id = us.id
    WHERE t.user_id = #{userId,jdbcType=VARCHAR}
  </select>

  <!--查看用户当天领取了多少任务-->
  <select id="selectByDays" parameterType="java.lang.String" resultMap="BaseResultMap">
     SELECT id, `name`, description, `status`, creator_id, user_id, create_time, update_time,
    content,receive_time
    FROM task
    where to_days(receive_time) = to_days(now()) AND user_id = #{userId,jdbcType=VARCHAR}
  </select>

  <!--查看用户下是否有未完成任务-->
  <select id="selectUncomplete" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT id, `name`, description, `status`, creator_id, user_id, create_time, update_time,
    content,receive_time
    FROM task
    WHERE user_id = #{userId,jdbcType=VARCHAR} AND status = 2
  </select>

</mapper>