<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.task.dao.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.task.entity.User">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="group_id" jdbcType="VARCHAR" property="groupId" />
    <result column="role_id" jdbcType="VARCHAR" property="roleId" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="group_name" jdbcType="VARCHAR" property="groupName" />
    <result column="role_name" jdbcType="VARCHAR" property="roleName" />
    <result column="role_description" jdbcType="VARCHAR" property="roleDescription" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from user
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.task.entity.User" useGeneratedKeys="true" keyProperty="id">
    <selectKey keyProperty="id" resultType="string" order="BEFORE">
      select replace(UUID(), '-', '')
    </selectKey>
    insert into user (id, username, `password`, 
      phone, group_id, role_id, 
      `status`, create_time, update_time
      )
    values (#{id,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{groupId,jdbcType=VARCHAR}, #{roleId,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.task.entity.User">
    update user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="groupId != null">
      group_id = #{groupId,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null">
        role_id = #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select u.id, u.username, u.`password`, u.phone, g.name AS group_name, r.name AS role_name,u.group_id, u.role_id, u.`status`, u.create_time,
    u.update_time
    from user u
    LEFT JOIN `group`  g ON u.group_id = g.id
    LEFT JOIN role r ON u.role_id = r.id
    where u.id = #{id,jdbcType=VARCHAR}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select u.id, u.username, u.`password`, u.phone, g.name AS group_name, r.name AS role_name,u.group_id, u.role_id, u.`status`, u.create_time,
    u.update_time
    from user u
    LEFT JOIN `group`  g ON u.group_id = g.id
    LEFT JOIN role r ON u.role_id = r.id
  </select>

  <select id="selectByName" parameterType="java.lang.String" resultMap="BaseResultMap">
    select u.id, u.username, u.`password`, u.phone, g.name AS group_name, r.name AS role_name,u.group_id, u.role_id, u.`status`, u.create_time,
    u.update_time
    from user u
    LEFT JOIN `group`  g ON u.group_id = g.id
    LEFT JOIN role r ON u.role_id = r.id
    WHERE u.username = #{userName,jdbcType=VARCHAR}
  </select>

  <select id="selectByGroupId" parameterType="java.lang.String" resultMap="BaseResultMap">
    select u.id, u.username, u.`password`, u.phone, g.name AS group_name, r.name AS role_name,u.group_id, r.description AS role_description,
     u.role_id ,u.`status`, u.create_time,
    u.update_time
    from user u
    LEFT JOIN `group`  g ON u.group_id = g.id
    LEFT JOIN role r ON u.role_id = r.id
    WHERE  u.group_id = #{groupId,jdbcType=VARCHAR}
  </select>
  
  <select id="selectByNameAndPassword" parameterType="java.lang.String" resultMap="BaseResultMap">
    select id, username, `password`, phone, group_id, role_id, `status`, create_time,
    update_time
    from user
    WHERE  username = #{userName,jdbcType=VARCHAR} AND password = #{password,jdbcType = VARCHAR}
  </select>
  
  <select id="selectApplyPage" resultMap="BaseResultMap">
    select u.id, u.username, u.`password`, u.phone, g.name AS group_name, r.name AS role_name,u.group_id, r.description AS role_description,
     u.role_id ,u.`status`, u.create_time,
    u.update_time
    from user u
    LEFT JOIN `group`  g ON u.group_id = g.id
    LEFT JOIN role r ON u.role_id = r.id
    WHERE  u.status = 1
  </select>

  <!--根据条件搜索申请用户列表-->
  <select id="searchApplyUserByContent" parameterType="java.lang.String" resultMap="BaseResultMap">
    select u.id, u.username, u.`password`, u.phone, g.name AS group_name, r.name AS role_name,u.group_id, r.description AS role_description,
    u.role_id ,u.`status`, u.create_time,
    u.update_time
    from user u
    LEFT JOIN `group`  g ON u.group_id = g.id
    LEFT JOIN role r ON u.role_id = r.id
    WHERE  u.status = 1
    <if test='null!= content and content!=""'>
      AND (u.username LIKE CONCAT('%','${content}','%') OR u.phone LIKE CONCAT('%','${content}','%'))
    </if>

  </select>
</mapper>